'use strict';

// Native dependencies
var path        = require('path');
var exec        = require('child_process').exec;
var util        = require('util');

// External dependencies
var gulp        = require('gulp');
var gutil       = require('gulp-util');
var browserSync = require('browser-sync');
var del         = require('del');
var vinylPaths  = require('vinyl-paths');
var mergeStream = require('merge-stream');
var inquirer    = require('inquirer');

// Load all installed gulp plugins into $
var $           = require('gulp-load-plugins')();

// Read current project data
var BOWER = require('./bower.json');

// Constants
var SRC_DIR     = './src';
var DIST_DIR    = './';
var DEMO_DIR    = './demo';
var TMP_DIR     = './tmp';

var LESS_DIR = [SRC_DIR + '/**/*.less'];
var CSS_DIR  = [SRC_DIR + '/**/*.css'];
var JS_DIR   = [SRC_DIR + '/**/*.js'];
var HTML_DIR = [SRC_DIR + '/**/*.html', DEMO_DIR + '/**/*.html'];

/////////////////////
// auxiliary tasks //
/////////////////////

/**
 * Cleans resources
 */
function _clean() {
    del.sync(TMP_DIR);
}

/**
 * Prepares components for vulcanization
 */
function _tmp() {

    var copySRC = gulp.src(SRC_DIR + '/*')
        .pipe($.rename(function (p) {
            p.dirname = BOWER.name;
        }))
        .pipe(gulp.dest(TMP_DIR));

    var copyBOWER = gulp.src('bower_components/**/*')
        .pipe(gulp.dest(TMP_DIR));

    return mergeStream(copySRC, copyBOWER);
}
gulp.task('_clean', _clean);
gulp.task('_tmp', ['_clean'], _tmp);

/////////////////////
// auxiliary tasks //
/////////////////////


/////////////////
// build tasks //
/////////////////

/**
 * Task for compiling less
 */
function _less() {

    return gulp.src(LESS_DIR)
        .pipe($.changed(SRC_DIR, { extension: '.css' }))
        .pipe($.duration('Compiling .less files'))
        .pipe($.less())
        .on('error', $.notify.onError({
            title: 'Less compiling error',
            message: '<%= error.message %>',
            open: 'file:///<%= error.filename %>',
            sound: 'Glass',
            // Basso, Blow, Bottle, Frog, Funk, Glass, Hero,
            // Morse, Ping, Pop, Purr, Sosumi, Submarine, Tink
            icon: path.join(__dirname, 'logo.png'),
        }))
        .pipe($.autoprefixer({
            browsers: [
                'ie >= 10',
                'ie_mob >= 10',
                'ff >= 30',
                'chrome >= 34',
                'safari >= 7',
                'opera >= 23',
                'ios >= 7',
                'android >= 4.4',
                'bb >= 10'
            ],
            cascade: false,
        }))
        .pipe($.minifyCss())
        // Put files at source dir in order to use them for vulcanization
        .pipe(gulp.dest(SRC_DIR))
        .pipe($.size({ title: 'less' }));
}

/**
 * Function for vulcanize task
 */
function _vulcanize() {

    // Message to be prepended to all .css files generated via less
    var message = [
        '<!--',
        'This file was generated by VULCANIZE.',
        'All modifications to it will be lost, mercilessly!',
        'Source code is at ./src directory ;)',
        '-->\n\n',
    ].join('\n');

    // Path to the component file
    var componentPath = path.join(TMP_DIR, BOWER.name, BOWER.name + '.html');
    // Excludes
    var excludes = [
        // Exclude polymer, as it is a common dependency
        path.join(TMP_DIR, '/polymer/polymer.html'),
    ];

    return gulp.src(componentPath)
        .pipe($.vulcanize({
            excludes: excludes,
            stripComments: true,
            inlineCss: true,
            inlineScripts: true,
            stripExcludes: false,
        }))
        .pipe($.header(message))
        .pipe(gulp.dest(DIST_DIR))
        .pipe($.size({title: 'vulcanize' }));    
}

// Register tasks
gulp.task('less', _less);
gulp.task('vulcanize', ['less', '_tmp'], _vulcanize);
gulp.task('distribute', ['vulcanize'], _clean);

/////////////////
// build tasks //
/////////////////


///////////////////////
// development tasks //
///////////////////////

/**
 * Serves the application
 */
gulp.task('serve', function () {

    browserSync({
        port: 4000,
        server: {
            baseDir: './',
            index: './demo/src.html',
        },
        serveStatic: ['bower_components'],
        open: true,
        // tunnel: true
    });
});

/**
 * Watches for changes and reloads the browser
 */
gulp.task('watch', function () {

    // Watch files for changes
    // Using gulp-watch plugin because the default gulp.watch method does
    // not watch for newly added files. Porbably must revise soon.
    // http://stackoverflow.com/questions/22391527/
    // gulps-gulp-watch-not-triggered-for-new-or-deleted-files
    $.watch(LESS_DIR, _less);

    // Reload
    var reloadDirs = JS_DIR.concat(CSS_DIR).concat(HTML_DIR);
    $.watch(reloadDirs, browserSync.reload);
});

// Serve & watch
gulp.task('develop', ['less', 'serve', 'watch']);
gulp.task('default', ['develop']);

///////////////////////
// development tasks //
///////////////////////



/////////////////
// setup tasks //
/////////////////

/**
 * Parses arguments from command line
 */

var RENAME = {};

gulp.task('rename:prompt', function (done) {

    // Warn the user
    var warningMessage = [
        '\n',
        'This task modifies the source code of the project.',
        'Please be sure that all your changes are commited,',
        'so that if anything goes wrong you may run',
        gutil.colors.white.bgGreen.bold('  git checkout <latest-commit>  '),
        'to revert any problematic changes.',
    ].join('\n');

    gutil.log(gutil.colors.red(warningMessage));

    // Questions
    var questions = [
        {
            message: 'Please type the component\'s name.',
            name: 'name',
            type: 'input',
            default: path.basename(__dirname),
            validate: function (name) {

                var isValid = (name.split('-').length > 1);

                var errorMessage = util.format('It must have a `-` (dash) character.', name);

                // Return true (Boolean) for valid and String for invalid.
                return isValid ? true : errorMessage;
            },
        },
        {
            name: 'confirm',
            message: function (answers) {

                var from = gutil.colors.white(BOWER.name);
                var to   = gutil.colors.green(answers.name);
                var confirmMessage = util.format('Rename `%s` -> `%s`', from, to);

                return confirmMessage;
            },
            type: 'confirm',
            default: false
        },
    ];

    inquirer.prompt(questions, function (answers) {
        // Save answers
        RENAME.confirm = answers.confirm;
        RENAME.name    = answers.name;

        done();
    });
});

/**
 * Renames the project.
 * Looks for relevant files and renames them according to the new project.
 * Be very careful with this task, as it automatically changes your code.
 *
 * Recommended usage is at the start of a new component project, after cloning 
 * this base repo.
 */
gulp.task('rename', ['rename:prompt'], function () {

    // Cancel rename if no confirm
    if (!RENAME.confirm) {
        gutil.log(gutil.colors.red('Rename cancelled by the user.'));
        return;
    }

    // Cancel is no name was given
    if (!RENAME.name) {
        gutil.log(gutil.colors.red('No name given.'));
        return;
    }

    // Change source files
    var _srcStream = gulp.src([path.join(SRC_DIR, '*')])
        // Remove original files
        .pipe(vinylPaths(del))
        // Rename files
        .pipe($.rename(function (filePath) {
            filePath.basename = RENAME.name;
        }))
        // Replace contents
        .pipe($.replace(BOWER.name, RENAME.name))
        // Put files back
        .pipe(gulp.dest(SRC_DIR));


    // Change demo files
    var demoFiles = [path.join(DEMO_DIR, '**/*.html')];
    var _demoStream = gulp.src(demoFiles)
        .pipe($.replace(BOWER.name, RENAME.name))
        .pipe(gulp.dest(DEMO_DIR));

        // Remove original built file
        del.sync('./' + BOWER.name + '.html');

    // Change auxiliary files
    var _packagingStream = gulp.src(['./bower.json', './package.json'])
        .pipe($.replace(BOWER.name, RENAME.name))
        .pipe(gulp.dest(DIST_DIR));

    var _fullStream = mergeStream();
    _fullStream
        .add(_srcStream)
        .add(_demoStream)
        .add(_packagingStream);

    _fullStream.on('end', function () {
        gutil.log(gutil.colors.green('Your component has been renamed to ' + RENAME.name));
    });
});

/////////////////
// setup tasks //
/////////////////